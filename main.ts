import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting } from 'obsidian';

interface swiftStormPluginSettings {
	username: string;
	webhookUrl: string;
	autoSync: boolean;
	syncOnChange: boolean;
	conflictResolution: 'size' | 'date';
	lastSyncTime: number;
	telegramUsername: string;
	confirmationToken: string;
	isRegistered: boolean;
}

const DEFAULT_SETTINGS: swiftStormPluginSettings = {
	username: '',
	webhookUrl: 'http://212.67.13.115:3005',
	autoSync: false,
	syncOnChange: true,
	conflictResolution: 'date',
	lastSyncTime: 0,
	telegramUsername: '',
	confirmationToken: '',
	isRegistered: false
}

export default class swiftStormRemoteVaultPlugin extends Plugin {
	settings: swiftStormPluginSettings;
	private isConnected: boolean = false;

	async onload() {
		await this.loadSettings();

		// This creates an icon in the left ribbon.
		const ribbonIconEl = this.addRibbonIcon('dice', 'swiftStorm Remote Vault', (evt: MouseEvent) => {
			// Called when the user clicks the icon.
			new Notice('swiftStorm Remote Vault –ø–æ–¥–∫–ª—é—á–µ–Ω!');
		});

		// This adds a simple command that can be triggered anywhere
		this.addCommand({
			id: 'sync-swiftstorm-vault',
			name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ swiftStorm',
			callback: () => {
				this.syncVault();
			}
		});

		// This adds a command for opening settings
		this.addCommand({
			id: 'open-swiftstorm-settings',
			name: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ swiftStorm',
			callback: () => {
				this.app.setting.open();
				this.app.setting.openTabById(this.manifest.id);
			}
		});

		// This adds a settings tab so the user can configure various aspects of the plugin
		this.addSettingTab(new swiftStormSettingTab(this.app, this));

		// If the plugin hooks up any global DOM events (on parts of the app that doesn't belong to this plugin)
		// Using this function will automatically remove the event listener when this plugin is disabled.
		this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
			console.log('click', evt);
		});

		// When registering intervals, this function will automatically clear the interval when the plugin is disabled.
		this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));

		// –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
		if (this.settings.autoSync && this.settings.isRegistered) {
			setTimeout(() => {
				this.syncVault();
			}, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Obsidian
		}

		// –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
		if (this.settings.isRegistered) {
			this.registerInterval(window.setInterval(() => {
				if (this.settings.syncOnChange) {
					this.syncVault();
				}
			}, 5 * 60 * 1000)); // 5 –º–∏–Ω—É—Ç
		}

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if (this.settings.isRegistered && this.settings.syncOnChange) {
			this.registerEvent(this.app.vault.on('create', (file) => {
				this.uploadFileToServer(file);
			}));

			this.registerEvent(this.app.vault.on('modify', (file) => {
				this.uploadFileToServer(file);
			}));

			this.registerEvent(this.app.vault.on('delete', (file) => {
				this.deleteFileFromServer(file);
			}));

			this.registerEvent(this.app.vault.on('rename', (file, oldPath) => {
				this.renameFileOnServer(file, oldPath);
			}));
		}

		console.log('swiftStorm Remote Vault plugin –∑–∞–≥—Ä—É–∂–µ–Ω');
	}

	onunload() {
		this.disconnect();
		console.log('swiftStorm Remote Vault plugin –≤—ã–≥—Ä—É–∂–µ–Ω');
	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}

	async registerViaTelegram() {
		if (!this.settings.telegramUsername) {
			new Notice('‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
			return;
		}

		try {
			new Notice('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram...');
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
			const response = await fetch(`${this.settings.webhookUrl}/obsidian-sync`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					telegramUsername: this.settings.telegramUsername
				})
			});

			if (response.ok) {
				const data = await response.json();
				
				if (data.status === 'confirmation_sent') {
					this.settings.confirmationToken = data.token;
					await this.saveSettings();
					
					new Notice('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ "–≠—Ç–æ —è"');
					
					// –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
					this.pollConfirmationStatus();
				} else {
					new Notice(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
				}
			} else {
				const errorData = await response.json();
				new Notice(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
			new Notice(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
		}
	}

	async pollConfirmationStatus() {
		if (!this.settings.confirmationToken) return;

		const maxAttempts = 30; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
		let attempts = 0;

		const poll = async () => {
			attempts++;
			
			try {
				const response = await fetch(`${this.settings.webhookUrl}/get-credentials`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						token: this.settings.confirmationToken
					})
				});

				if (response.ok) {
					const data = await response.json();
					
					if (data.status === 'confirmed') {
						// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						// Username –ø–æ–ª—É—á–∞–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–∞
						if (data.username) {
							this.settings.username = data.username;
						}
						this.settings.isRegistered = true;
						this.settings.confirmationToken = '';
						await this.saveSettings();
						
						new Notice('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
						
						// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
						await this.syncVault();
						return;
					} else if (data.status === 'rejected') {
						new Notice('‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
						this.settings.confirmationToken = '';
						await this.saveSettings();
						return;
					}
				}
				
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
				if (attempts < maxAttempts) {
					setTimeout(poll, 10000); // 10 —Å–µ–∫—É–Ω–¥
				} else {
					new Notice('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
					this.settings.confirmationToken = '';
					await this.saveSettings();
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞:', error);
				if (attempts < maxAttempts) {
					setTimeout(poll, 10000);
				}
			}
		};

		poll();
	}

	async syncVault() {
		if (!this.settings.username) {
			new Notice('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram');
			return;
		}

		try {
			new Notice('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å swiftStorm —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º...');
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
			const response = await fetch(`${this.settings.webhookUrl}/sync-vault`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					username: this.settings.username
				})
			});

			if (response.ok) {
				const data = await response.json();
				
				if (data.status === 'success') {
					// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
					if (data.vault.folders) {
						for (const folder of data.vault.folders) {
							await this.app.vault.createFolder(folder).catch(() => {});
						}
					}
					
					// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
					if (data.vault.files) {
						for (const file of data.vault.files) {
							const filePath = file.name; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
							const content = file.content || `# ${file.name}\n\n–§–∞–π–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å swiftStorm —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.`;
							
							try {
								await this.app.vault.create(filePath, content);
							} catch (error) {
								// –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
								const existingFile = this.app.vault.getAbstractFileByPath(filePath);
								if (existingFile) {
									await this.app.vault.modify(existingFile as any, content);
								}
							}
						}
					}
					
					// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
					this.settings.lastSyncTime = Date.now();
					await this.saveSettings();
					
					this.isConnected = true;
					new Notice(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ ${data.vault.files?.length || 0} —Ñ–∞–π–ª–æ–≤`);
					
					// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ—Ä–Ω–µ
					const statusFile = `üìã –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ swiftStorm.md`;
					const statusContent = `# üîó swiftStorm Remote Vault

## üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${data.username}  
**–°—Ç–∞—Ç—É—Å:** ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ  
**–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:** ${new Date().toLocaleString()}  
**–§–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:** ${data.vault.files?.length || 0}  
**–ü–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–æ:** ${data.vault.folders?.length || 0}

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫

${data.vault.folders?.map(folder => `- **üìÅ ${folder}/**`).join('\n') || '–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ

---
*–°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–º swiftStorm Remote Vault v2.0*
`;

					try {
						await this.app.vault.create(statusFile, statusContent);
					} catch (error) {
						const existingFile = this.app.vault.getAbstractFileByPath(statusFile);
						if (existingFile) {
							await this.app.vault.modify(existingFile as any, statusContent);
						}
					}
					
				} else {
					new Notice(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
				}
			} else {
				const errorData = await response.json();
				new Notice(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
			new Notice(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
		}
	}

	isConnectedToVault(): boolean {
		return this.isConnected;
	}

	async uploadFileToServer(file: any) {
		if (!this.settings.isRegistered || !this.settings.syncOnChange) return;
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if (file.path.includes('üìã –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ swiftStorm.md')) return;
		
		try {
			const content = await this.app.vault.read(file);
			
			const response = await fetch(`${this.settings.webhookUrl}/upload-file`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					username: this.settings.username,
					filePath: file.path,
					content: content
				})
			});

			if (response.ok) {
				console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${file.path}`);
			} else {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${file.path}`);
			}
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ ${file.path}:`, error);
		}
	}

	async deleteFileFromServer(file: any) {
		if (!this.settings.isRegistered || !this.settings.syncOnChange) return;
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if (file.path.includes('üìã –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ swiftStorm.md')) return;
		
		try {
			const response = await fetch(`${this.settings.webhookUrl}/delete-file`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					username: this.settings.username,
					filePath: file.path
				})
			});

			if (response.ok) {
				console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: ${file.path}`);
			} else {
				console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${file.path}`);
			}
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file.path}:`, error);
		}
	}

	async renameFileOnServer(file: any, oldPath: string) {
		if (!this.settings.isRegistered || !this.settings.syncOnChange) return;
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if (file.path.includes('üìã –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ swiftStorm.md') || 
			oldPath.includes('üìã –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ swiftStorm.md')) return;
		
		try {
			const content = await this.app.vault.read(file);
			
			const response = await fetch(`${this.settings.webhookUrl}/rename-file`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					username: this.settings.username,
					oldPath: oldPath,
					newPath: file.path,
					content: content
				})
			});

			if (response.ok) {
				console.log(`‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${oldPath} -> ${file.path}`);
			} else {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${oldPath} -> ${file.path}`);
			}
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${oldPath} -> ${file.path}:`, error);
		}
	}
}


// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞
class swiftStormSettingTab extends PluginSettingTab {
	plugin: swiftStormRemoteVaultPlugin;

	constructor(app: App, plugin: swiftStormRemoteVaultPlugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;

		containerEl.empty();

		containerEl.createEl('h2', {text: 'swiftStorm Remote Vault –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'});

		// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		new Setting(containerEl)
			.setName("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
			.addText(text => text
				.setValue(this.plugin.settings.isRegistered ? "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" : "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
				.setDisabled(true));

		// Telegram Username
		new Setting(containerEl)
			.setName("Telegram Username")
			.setDesc("–í–∞—à Telegram username (–±–µ–∑ @)")
			.addText(text => text
				.setPlaceholder("your_telegram_username")
				.setValue(this.plugin.settings.telegramUsername)
				.onChange(async (value) => {
					this.plugin.settings.telegramUsername = value;
					await this.plugin.saveSettings();
				}));

		// Username (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
		if (this.plugin.settings.username) {
			new Setting(containerEl)
				.setName("Username")
				.setDesc("–í–∞—à username –≤ —Å–∏—Å—Ç–µ–º–µ swiftStorm (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω)")
				.addText(text => text
					.setValue(this.plugin.settings.username)
					.setDisabled(true));
		}

		// Webhook URL
		new Setting(containerEl)
			.setName("Webhook URL")
			.setDesc("URL webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
			.addText(text => text
				.setPlaceholder("http://212.67.13.115:3005")
				.setValue(this.plugin.settings.webhookUrl)
				.onChange(async (value) => {
					this.plugin.settings.webhookUrl = value;
					await this.plugin.saveSettings();
				}));

		// –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
		new Setting(containerEl)
			.setName("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
			.setDesc("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Obsidian")
			.addToggle(toggle => toggle
				.setValue(this.plugin.settings.autoSync)
				.onChange(async (value) => {
					this.plugin.settings.autoSync = value;
					await this.plugin.saveSettings();
				}));

		// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
		new Setting(containerEl)
			.setName("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏")
			.setDesc("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
			.addToggle(toggle => toggle
				.setValue(this.plugin.settings.syncOnChange)
				.onChange(async (value) => {
					this.plugin.settings.syncOnChange = value;
					await this.plugin.saveSettings();
				}));

		// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
		new Setting(containerEl)
			.setName("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö")
			.setDesc("–ö–∞–∫–æ–π —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –≤–µ—Ä—Å–∏–π")
			.addDropdown(dropdown => dropdown
				.addOption('date', '–ü–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
				.addOption('size', '–ü–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞')
				.setValue(this.plugin.settings.conflictResolution)
				.onChange(async (value: 'size' | 'date') => {
					this.plugin.settings.conflictResolution = value;
					await this.plugin.saveSettings();
				}));

		// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if (this.plugin.settings.lastSyncTime > 0) {
			new Setting(containerEl)
				.setName("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
				.addText(text => text
					.setValue(new Date(this.plugin.settings.lastSyncTime).toLocaleString())
					.setDisabled(true));
		}

		// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		if (!this.plugin.settings.isRegistered && this.plugin.settings.telegramUsername) {
			new Setting(containerEl)
				.setName("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
				.setDesc("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram")
				.addButton(btn => btn
					.setButtonText("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram")
					.onClick(() => {
						this.plugin.registerViaTelegram();
					}));
		}

		// –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if (this.plugin.settings.isRegistered) {
			new Setting(containerEl)
				.setName("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
				.setDesc("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Å–µ—Ä–≤–µ—Ä–∞")
				.addButton(btn => btn
					.setButtonText("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
					.onClick(() => {
						this.plugin.syncVault();
					}));
		}
	}
}
